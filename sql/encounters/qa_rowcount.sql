WITH params AS (
  SELECT
    '{{DB}}' AS customer_db,
    '{{SCHEMA}}' AS qa_schema
),
results AS (
  -- Event tables
  SELECT 'MEDICAL_HEADERS' AS table_name, 'new' AS version,
         COUNT(*) AS row_count,
         COUNT(DISTINCT HASH(PATIENT_TOKEN_1, PATIENT_TOKEN_2)) AS patient_count
  FROM IDENTIFIER('{{DB}}.{{SCHEMA}}.MEDICAL_HEADERS_{{REVIEW_SUFFIX}}')
  UNION ALL
  SELECT 'MEDICAL_HEADERS', 'previous', COUNT(*),
         COUNT(DISTINCT HASH(PATIENT_TOKEN_1, PATIENT_TOKEN_2))
  FROM IDENTIFIER('{{DB}}.{{SCHEMA}}.MEDICAL_HEADERS_{{LATEST_SUFFIX}}')

  UNION ALL
  SELECT 'MEDICAL_SERVICE_LINES', 'new', COUNT(*),
         COUNT(DISTINCT HASH(PATIENT_TOKEN_1, PATIENT_TOKEN_2))
  FROM IDENTIFIER('{{DB}}.{{SCHEMA}}.MEDICAL_SERVICE_LINES_{{REVIEW_SUFFIX}}')
  UNION ALL
  SELECT 'MEDICAL_SERVICE_LINES', 'previous', COUNT(*),
         COUNT(DISTINCT HASH(PATIENT_TOKEN_1, PATIENT_TOKEN_2))
  FROM IDENTIFIER('{{DB}}.{{SCHEMA}}.MEDICAL_SERVICE_LINES_{{LATEST_SUFFIX}}')

  UNION ALL
  SELECT 'PHARMACY', 'new', COUNT(*),
         COUNT(DISTINCT HASH(PATIENT_TOKEN_1, PATIENT_TOKEN_2))
  FROM IDENTIFIER('{{DB}}.{{SCHEMA}}.PHARMACY_{{REVIEW_SUFFIX}}')
  UNION ALL
  SELECT 'PHARMACY', 'previous', COUNT(*),
         COUNT(DISTINCT HASH(PATIENT_TOKEN_1, PATIENT_TOKEN_2))
  FROM IDENTIFIER('{{DB}}.{{SCHEMA}}.PHARMACY_{{LATEST_SUFFIX}}')

  -- Reference/entity tables
  UNION ALL
  SELECT 'PATIENT_ENROLLMENT', 'new', COUNT(*),
         COUNT(DISTINCT HASH(PATIENT_TOKEN_1, PATIENT_TOKEN_2))
  FROM IDENTIFIER('{{DB}}.{{SCHEMA}}.PATIENT_ENROLLMENT_{{REVIEW_SUFFIX}}')
  UNION ALL
  SELECT 'PATIENT_ENROLLMENT', 'previous', COUNT(*),
         COUNT(DISTINCT HASH(PATIENT_TOKEN_1, PATIENT_TOKEN_2))
  FROM IDENTIFIER('{{DB}}.{{SCHEMA}}.PATIENT_ENROLLMENT_{{LATEST_SUFFIX}}')

  UNION ALL
  SELECT 'PATIENT_SUMMARIES', 'new', COUNT(*),
         COUNT(DISTINCT HASH(PATIENT_TOKEN_1, PATIENT_TOKEN_2))
  FROM IDENTIFIER('{{DB}}.{{SCHEMA}}.PATIENT_SUMMARIES_{{REVIEW_SUFFIX}}')
  UNION ALL
  SELECT 'PATIENT_SUMMARIES', 'previous', COUNT(*),
         COUNT(DISTINCT HASH(PATIENT_TOKEN_1, PATIENT_TOKEN_2))
  FROM IDENTIFIER('{{DB}}.{{SCHEMA}}.PATIENT_SUMMARIES_{{LATEST_SUFFIX}}')

  UNION ALL
  SELECT 'PLANS', 'new', COUNT(*), NULL
  FROM IDENTIFIER('{{DB}}.{{SCHEMA}}.PLANS_{{REVIEW_SUFFIX}}')
  UNION ALL
  SELECT 'PLANS', 'previous', COUNT(*), NULL
  FROM IDENTIFIER('{{DB}}.{{SCHEMA}}.PLANS_{{LATEST_SUFFIX}}')

  UNION ALL
  SELECT 'PAYERS', 'new', COUNT(*), NULL
  FROM IDENTIFIER('{{DB}}.{{SCHEMA}}.PAYERS_{{REVIEW_SUFFIX}}')
  UNION ALL
  SELECT 'PAYERS', 'previous', COUNT(*), NULL
  FROM IDENTIFIER('{{DB}}.{{SCHEMA}}.PAYERS_{{LATEST_SUFFIX}}')

  UNION ALL
  SELECT 'PROVIDER_SUMMARIES', 'new', COUNT(*), NULL
  FROM IDENTIFIER('{{DB}}.{{SCHEMA}}.PROVIDER_SUMMARIES_{{REVIEW_SUFFIX}}')
  UNION ALL
  SELECT 'PROVIDER_SUMMARIES', 'previous', COUNT(*), NULL
  FROM IDENTIFIER('{{DB}}.{{SCHEMA}}.PROVIDER_SUMMARIES_{{LATEST_SUFFIX}}')

  UNION ALL
  SELECT 'ALLOWED_AMOUNTS', 'new', COUNT(*), NULL
  FROM IDENTIFIER('{{DB}}.{{SCHEMA}}.ALLOWED_AMOUNTS_{{REVIEW_SUFFIX}}')
  UNION ALL
  SELECT 'ALLOWED_AMOUNTS', 'previous', COUNT(*), NULL
  FROM IDENTIFIER('{{DB}}.{{SCHEMA}}.ALLOWED_AMOUNTS_{{LATEST_SUFFIX}}')

  UNION ALL
  SELECT 'VISIT_SUMMARIES', 'new', COUNT(*), NULL
  FROM IDENTIFIER('{{DB}}.{{SCHEMA}}.VISIT_SUMMARIES_{{REVIEW_SUFFIX}}')
  UNION ALL
  SELECT 'VISIT_SUMMARIES', 'previous', COUNT(*), NULL
  FROM IDENTIFIER('{{DB}}.{{SCHEMA}}.VISIT_SUMMARIES_{{LATEST_SUFFIX}}')
)
SELECT
  table_name,
  version,
  row_count,
  row_count - LEAD(row_count) OVER (PARTITION BY table_name ORDER BY version ASC) AS row_delta,
  ROUND((row_count - LEAD(row_count) OVER (PARTITION BY table_name ORDER BY version ASC))
        / NULLIF(LEAD(row_count) OVER (PARTITION BY table_name ORDER BY version ASC), 0) * 100, 2) AS row_delta_pct,
  patient_count,
  patient_count - LEAD(patient_count) OVER (PARTITION BY table_name ORDER BY version ASC) AS patient_delta,
  ROUND((patient_count - LEAD(patient_count) OVER (PARTITION BY table_name ORDER BY version ASC))
        / NULLIF(LEAD(patient_count) OVER (PARTITION BY table_name ORDER BY version ASC), 0) * 100, 2) AS patient_delta_pct
FROM results
ORDER BY table_name, version;